/* automatically generated by rust-bindgen 0.60.1 */

pub type __int8_t = ::std::os::raw::c_schar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FEECoeffs {
    pub x_q1_accum: *const f64,
    pub x_q2_accum: *const f64,
    pub x_m_accum: *const i8,
    pub x_n_accum: *const i8,
    pub x_m_signs: *const i8,
    pub x_m_abs_m: *const i8,
    pub x_n_max: *const ::std::os::raw::c_uchar,
    pub x_lengths: *const ::std::os::raw::c_int,
    pub x_offsets: *const ::std::os::raw::c_int,
    pub y_q1_accum: *const f64,
    pub y_q2_accum: *const f64,
    pub y_m_accum: *const i8,
    pub y_n_accum: *const i8,
    pub y_m_signs: *const i8,
    pub y_m_abs_m: *const i8,
    pub y_n_max: *const ::std::os::raw::c_uchar,
    pub y_lengths: *const ::std::os::raw::c_int,
    pub y_offsets: *const ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FEECoeffs() {
    assert_eq!(
        ::std::mem::size_of::<FEECoeffs>(),
        144usize,
        concat!("Size of: ", stringify!(FEECoeffs))
    );
    assert_eq!(
        ::std::mem::align_of::<FEECoeffs>(),
        8usize,
        concat!("Alignment of ", stringify!(FEECoeffs))
    );
    fn test_field_x_q1_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_q1_accum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_q1_accum)
            )
        );
    }
    test_field_x_q1_accum();
    fn test_field_x_q2_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_q2_accum) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_q2_accum)
            )
        );
    }
    test_field_x_q2_accum();
    fn test_field_x_m_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_m_accum) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_m_accum)
            )
        );
    }
    test_field_x_m_accum();
    fn test_field_x_n_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_n_accum) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_n_accum)
            )
        );
    }
    test_field_x_n_accum();
    fn test_field_x_m_signs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_m_signs) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_m_signs)
            )
        );
    }
    test_field_x_m_signs();
    fn test_field_x_m_abs_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_m_abs_m) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_m_abs_m)
            )
        );
    }
    test_field_x_m_abs_m();
    fn test_field_x_n_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_n_max) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_n_max)
            )
        );
    }
    test_field_x_n_max();
    fn test_field_x_lengths() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_lengths) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_lengths)
            )
        );
    }
    test_field_x_lengths();
    fn test_field_x_offsets() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_offsets) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(x_offsets)
            )
        );
    }
    test_field_x_offsets();
    fn test_field_y_q1_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_q1_accum) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_q1_accum)
            )
        );
    }
    test_field_y_q1_accum();
    fn test_field_y_q2_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_q2_accum) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_q2_accum)
            )
        );
    }
    test_field_y_q2_accum();
    fn test_field_y_m_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_m_accum) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_m_accum)
            )
        );
    }
    test_field_y_m_accum();
    fn test_field_y_n_accum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_n_accum) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_n_accum)
            )
        );
    }
    test_field_y_n_accum();
    fn test_field_y_m_signs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_m_signs) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_m_signs)
            )
        );
    }
    test_field_y_m_signs();
    fn test_field_y_m_abs_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_m_abs_m) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_m_abs_m)
            )
        );
    }
    test_field_y_m_abs_m();
    fn test_field_y_n_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_n_max) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_n_max)
            )
        );
    }
    test_field_y_n_max();
    fn test_field_y_lengths() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_lengths) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_lengths)
            )
        );
    }
    test_field_y_lengths();
    fn test_field_y_offsets() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<FEECoeffs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_offsets) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(FEECoeffs),
                "::",
                stringify!(y_offsets)
            )
        );
    }
    test_field_y_offsets();
}
extern "C" {
    pub fn cuda_calc_jones(
        d_azs: *const f64,
        d_zas: *const f64,
        num_directions: ::std::os::raw::c_int,
        d_coeffs: *const FEECoeffs,
        num_coeffs: ::std::os::raw::c_int,
        norm_jones: *const ::std::os::raw::c_void,
        parallactic: i8,
        d_results: *mut ::std::os::raw::c_void,
        error_str: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
